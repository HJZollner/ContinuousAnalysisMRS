[["index.html", "Automated MRS data analysis workflow Welcome", " Automated MRS data analysis workflow Georg Oeltzschner 2022-10-27 Welcome "],["setup-installation.html", "1 Setup &amp; Installation 1.1 Watchman 1.2 BIDScoin", " 1 Setup &amp; Installation 1.1 Watchman Watchman is a file watching service. It will monitor a given directory and execute commands when certain conditions are met. In our case, we are going to monitor the raw directory for a given study and execute a series of organization and analysis steps, including sorting dicoms, bids-ifying data, and running Osprey. Installation instructions for Watchman can be found here and are summarized below: 1.1.1 Windows First install the Chocolatey package manager, similar to Homebrew on Mac or apt on Linux: 1. Open the Windows PowerShell with Administrator rights. 2. Make sure that the user rights are set appropriately: 1. Type Get-ExecutionPolicy at the prompt and hit Enter. 2. If it returns Restricted, then run Set-ExecutionPolicy AllSigned or Set-ExecutionPolicy Bypass -Scope Process. 3. Run the following command: Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;)) Once Chocolatey is installed, run choco install watchman. 1.1.2 MacOS First install the Homebrew package manager: /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; Then install watchman: brew update brew install watchman 1.2 BIDScoin Detailed installation instructions can be found in the [BIDScoin documentation] (https://bidscoin.readthedocs.io/en/latest/installation.html) and are summarized below. Make sure that you have Python &gt;= 3.8 installed on your system. It is recommended to set up a conda environment to maintain reproducibility (conda env automated) pip install bidscoin[all] 1.2.1 spec2nii spec2nii is the tool converting raw MRS data into NIfTI-MRS format. Install with conda install -c conda-forge spec2nii or pip install spec2nii Detailed installation instructions at the spec2nii GitHub repository maintained by Will Clarke. 1.2.2 dcm2niix BIDScoin also requires dcm2niix to be installed (this is the tool that performs the conversion from DICOM to NIfTI). Download and extract the latest release from https://github.com/rordenlab/dcm2niix for your system. MRICroGL has dcm2niix built-in. Try running bidscoin -t from the prompt. If there is an error, you might need to link BIDScoin with dcm2niix. You can obtain the location of the dcm2niix executable by typing which dcm2niix Copy this location into the template BIDScoin bidsmap configuration file (you can locate it with bidscoin -t), which could, for example, be at /Users/JohnDoe/anaconda3/lib/python3.8/site-packages/bidscoin/heuristics/bidsmap_dccn.yaml. This file should then read plugins: # List of plugins with plugin-specific key-value pairs (that can be used by the plugin) dcm2niix2bids: # See dcm2niix -h and https://www.nitrc.org/plugins/mwiki/index.php/dcm2nii:MainPage#General_Usage for more info command: dcm2niix # Command to run dcm2niix, e.g. &quot;module add dcm2niix/1.0.20180622; dcm2niix&quot; or &quot;PATH=/opt/dcm2niix/bin:$PATH; dcm2niix&quot; or /opt/dcm2niix/bin/dcm2niix or &#39;&quot;C:\\Program Files\\dcm2niix\\dcm2niix.exe&quot;&#39; (use quotes to deal with whitespaces in the path) args: -b y -z y -i n -l n # Argument string that is passed to dcm2niix. Tip: SPM users may want to use &#39;-z n&#39; (which produces unzipped nifti&#39;s, see dcm2niix -h for more information) anon: y # Set this anonymization flag to &#39;y&#39; to round off age and discard acquisition date from the meta data meta: [.json, .tsv, .tsv.gz] where the path to the dcm2niix executable should be the value of the command field. "],["configuration.html", "2 Configuration 2.1 Watchman", " 2 Configuration This chapter describes some individual configurations that the user needs to modify and adjust depending on their project organization structure. This step mostly concerns correct set up of file and directory names to execute the chain of commands for the different parts of the automated workflow. 2.1 Watchman 2.1.1 Editing the watchmantrigger The watchmantrigger.json file points to the directory that watchman is supposed to monitor, as well as point to the main automation script to execute. This is the generic watchmantrigger.json [ &quot;trigger&quot;, &quot;$basedirectory/raw&quot;, { &quot;name&quot; : &quot;subtrigger&quot; , &quot;expression&quot;: [&quot;match&quot;, &quot;sub*&quot; ] , &quot;command&quot; : [&quot;python&quot;, &quot;$scriptdirectory/main.py&quot;, &quot;$basedirectory&quot;] } ] This is an example watchmantrigger.json [ &quot;trigger&quot;, &quot;/users/JohnDoe/projects/AutomatedMRSAnalysis/data/raw&quot;, { &quot;name&quot; : &quot;subtrigger&quot; , &quot;expression&quot;: [&quot;match&quot;, &quot;sub*&quot; ] , &quot;command&quot; : [&quot;python&quot;, &quot;/users/JohnDoe/projects/MRS/data/src/main.py&quot;, &quot;/users/JohnDoe/projects/MRS/data/raw&quot;] } ] 2.1.2 Activating directory monitoring First, we tell watchman which BIDS raw data folder we need it to monitor. The generic command for this is watchman watch $rawdirectory In our example, we will therefore execute watchman watch /users/JohnDoe/projects/AutomatedMRSAnalysis/data/raw Then, we need to tell the watchman service which script it is supposed to execute when it discovers a change in the monitored directory: watchman -j &lt; watchmantrigger.json In our example, we point to watchman -j &lt; /users/JohnDoe/projects/AutomatedMRSAnalysis/data/src/watchmantrigger.json ** We strongly recommend testing the later parts of the workflow before deploying the automated directory monitoring. ** "],["main-automation-script.html", "3 Main automation script 3.1 DICOMSORT arguments", " 3 Main automation script 3.1 DICOMSORT arguments The main script calls the dicomsort function that inspects the newly added folders for DICOM files and sorts them into suitably named folders. This step helps the BIDScoin heuristics with the BIDS conversion. Depending on the DICOM header information, there might be a need to tailor the dicomsortcommand. For example, our GE DICOM test data lacked the DICOM tag SeriesDescription that is, by default, used to determine the output folder name for dicomsort. We could override it by using the field ScanningSeries. In the main script, we replaced script = &#39;dicomsort {}&#39;.format(subdir) # Script to Call with script = &#39;dicomsort -f &#39;{ScanningSeries}&#39; {}&#39;.format(subdir) # Script to Call Here, we added -f {ScanningSeries} to tell dicomsort that it should use this tag to name the output folder. 3.1.0.1 "],["osprey-e-mail-configuration.html", "4 Osprey e-mail configuration 4.1 Configure Gmail 4.2 Configure Osprey", " 4 Osprey e-mail configuration 4.1 Configure Gmail For security, MATLAB has to be enabled as an app for Gmail, and used in conjunction with an app-specific password. The following instructions set up your Gmail account to work with Matlabs sendmail function. Set up 2-factor authentication: Sign in to the Google account associated with the Gmail address. Navigate to settings -&gt; security -&gt; signing in to Google. There are several options. With 2-factor authentication enabled: Navigate to settings -&gt; security -&gt; signing in to Google. A section called App Passwords should now be available. Under Select app type MATLAB and then select generate. A 16-digit code is produced that can be used in the Osprey email config file. 4.2 Configure Osprey With the appropriate configurations for the source email address in place, Osprey can be configured to send the email reports to the intended recipient(s). Create a source email config JSON file containing two fields: SourceEmail: the email address to send reports from. Password: in the case of Gmail, this is the 16-digit passcode. In the Osprey job file, two additional fields are required. mailtoConfig: the path to the JSON file created in step 1. mailtoRecipients: a cell array of recipient email addresses. The function, OspreyAutoMail, can be manually initiated at any time with a single argument, MRSCont. As a part of the automated pipeline, OspreyAutoMail is called at the conclusion of RunOspreyJob.m. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
